<?php
/**
 * This module provides github API integration.
 *
 * @author Gor Martsen <gor@me.com>
 */
 
 define('GITHUB_ISSUES_ISSUES_REPO', 'backdrop/backdrop-issues');
 define('GITHUB_ISSUES_CODE_REPO', 'backdrop/backdrop');

 /**
 * Implements hook_githubapi_payload().
 */
function github_issues_githubapi_payload($event_name, $event, $repo){
  $expr = '/(?<!\S)#([0-9]*)/i';

  switch ($event_name) {
    case 'push':
      foreach($event['data']->commits as $commit){
        $match = NULL;
        $message = '';
        preg_match_all($expr, $commit->message, $match);
        if(!empty($match[1])){
          foreach($match[1] as $issue){
            $message .= GITHUB_ISSUES_ISSUES_REPO . '#' . $issue . " ";
          }
          if(!empty($message)){
            github_issues_commit_comment_add($commit->id, $message, $repo);
          }
        }
      }
      break;
    case 'pull_request':
      $message = '';
      preg_match_all($expr, $event['data']->pull_request->title . ' ' . $event['data']->pull_request->body, $match);
      if(!empty($match[1])){
        foreach($match[1] as $issue){
          $message .= GITHUB_ISSUES_ISSUES_REPO . '#' . $issue . " ";
        }

        if(!empty($message)){
          github_issues_issue_comment_add($event['data']->number, $message, $repo);
        }
      }
      break;
  }
}

function github_issues_issue_comment_add($number, $message, $repo) {
  $githubapi = githubapi_get_class($repo);
  $settings = array(
    ':number' => $number,
    'body' => t('Related to: ') . $message,
  );
  $githubapi->createIssueComment($settings);
}


function github_issues_commit_comment_add($sha, $message, $repo) {
  $githubapi = githubapi_get_class($repo);
  $settings = array(
    ':sha' => $sha,
    'body' => t('Related to: ') . $message,
  );
  $githubapi->createComment($settings);
}
